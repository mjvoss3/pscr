% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidycensus_supplement.R
\name{get_multi_geo_acs}
\alias{get_multi_geo_acs}
\title{Get ACS data for multiple Iowa geographies in one dataframe}
\usage{
get_multi_geo_acs(
  geos = c("block group", "tract", "place", "county"),
  variables,
  output = "wide",
  .fn = NULL,
  ...
)
}
\arguments{
\item{geos}{A character vector of geography levels. Can be any of block group, tract, place, or county}

\item{variables}{A character vector of variable IDs}

\item{output}{Determines the format of the output dataframe; one of wide or long/tidy}

\item{.fn}{Function for data modification. This function will be applied to the data at every geography level and requires preservation of the GEOID variable with the same name}

\item{...}{Other arguments that will be passed to tidycensus::get_acs()}
}
\value{
A dataframe with specified ACS data
}
\description{
This function returns a dataframe with specified variables (or variables modified by a function) for all specified goegraphy levels
}
\examples{
# ACS variables to be passed to tidycensus::get_acs()
input_variables <- c("B03002_001", "B03002_003") # Total population & non-Hispanic, white alone population

# Creating a modifying function for interpretable calculations
data_function <- function(data){
  data |>
    dplyr::transmute(
      GEOID = GEOID,
      pop_total = B03002_001E,
      white_pct = B03002_003E / B03002_001E
     )
 }

# Loading data in wide form
wide_data <- get_multi_geo_acs(variables = input_variables, state = "IA", .fn = data_function)
head(wide_data)

# Loading data in long form
long_data <- get_multi_geo_acs(variables = input_variables, state = "IA", output = "tidy", .fn = data_function)
head(long_data)
}
